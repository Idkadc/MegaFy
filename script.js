// --- Global State ---
let currentPlaylist = [];
let currentTrackIndex = -1;
let isPlaying = false;
const audio = new Audio();

// --- Simulated Data (The MEGA Folder/Playlist) ---
// In a real app, these links would be generated by decoding the MEGA link.
// The URLs below are public, streamable WAV files for demonstration.
const SIMULATED_PLAYLIST_DATA = [
    { 
        title: "Cantina Band", 
        artist: "Star Wars Soundtrack (Simulated)", 
        url: "https://www2.cs.uic.edu/~i101/SoundFiles/CantinaBand3.wav" 
    },
    { 
        title: "T-Rex Roar", 
        artist: "Jurassic Park (Simulated)", 
        url: "https://www2.cs.uic.edu/~i101/SoundFiles/StarWars60.wav" 
    },
    { 
        title: "Train Whistle", 
        artist: "Sound Effects (Simulated)", 
        url: "https://www2.cs.uic.edu/~i101/SoundFiles/short_train_whistle.wav" 
    }
];

// --- DOM Elements ---
const playlistContainer = document.getElementById('playlistContainer');
const playPauseButton = document.getElementById('playPauseButton');
const prevButton = document.getElementById('prevButton');
const nextButton = document.getElementById('nextButton');
const playPauseIcon = playPauseButton.querySelector('i');
const trackTitle = document.getElementById('trackTitle');
const trackArtist = document.getElementById('trackArtist');
const currentTimeDisplay = document.getElementById('currentTime');
const durationDisplay = document.getElementById('duration');
const progressBar = document.getElementById('progressBar');
const progressBarContainer = document.getElementById('progressBarContainer');
const megaLinkInput = document.getElementById('megaLinkInput');
const loadButton = document.getElementById('loadButton');


// --- Utility Functions ---

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
}

function updatePlayerControls(enabled) {
    [playPauseButton, prevButton, nextButton].forEach(btn => {
        btn.disabled = !enabled;
        btn.classList.toggle('disabled', !enabled);
    });
}

function renderPlaylist() {
    playlistContainer.innerHTML = ''; // Clear existing list
    
    SIMULATED_PLAYLIST_DATA.forEach((track, index) => {
        const item = document.createElement('div');
        item.classList.add('playlist-item');
        item.dataset.index = index;
        item.innerHTML = `
            <span class="track-number">${index + 1}.</span>
            <span class="track-info-text">${track.title} - ${track.artist}</span>
        `;
        
        item.addEventListener('click', () => {
            loadTrack(index);
        });
        
        playlistContainer.appendChild(item);
    });
}

// --- Core Player Logic ---

function loadTrack(index, autoPlay = true) {
    if (index < 0 || index >= SIMULATED_PLAYLIST_DATA.length) {
        return; // Out of bounds
    }

    currentTrackIndex = index;
    const track = SIMULATED_PLAYLIST_DATA[currentTrackIndex];

    // Update Player UI
    trackTitle.textContent = track.title;
    trackArtist.textContent = track.artist;
    
    // Highlight active track in playlist
    document.querySelectorAll('.playlist-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`.playlist-item[data-index="${index}"]`).classList.add('active');

    // Load audio
    audio.src = track.url;
    audio.load();
    updatePlayerControls(true); // Enable controls

    if (autoPlay) {
        audio.play().then(() => {
            isPlaying = true;
            playPauseIcon.className = 'fas fa-pause';
        }).catch(error => {
            console.error("Autoplay failed:", error);
            // Handle cases where browser prevents autoplay
            isPlaying = false;
            playPauseIcon.className = 'fas fa-play';
        });
    } else {
        isPlaying = false;
        playPauseIcon.className = 'fas fa-play';
    }
}

function skipTrack(direction) {
    let newIndex = currentTrackIndex + direction;
    if (newIndex >= SIMULATED_PLAYLIST_DATA.length) {
        newIndex = 0; // Wrap to start
    } else if (newIndex < 0) {
        newIndex = SIMULATED_PLAYLIST_DATA.length - 1; // Wrap to end
    }
    loadTrack(newIndex);
}

// --- Event Listeners ---

// Initial load (Simulates the app starting up and finding a MEGA Folder)
document.addEventListener('DOMContentLoaded', () => {
    renderPlaylist();
});

// Play/Pause Button
playPauseButton.addEventListener('click', () => {
    if (currentTrackIndex === -1) {
        // If nothing is playing, load the first track
        loadTrack(0); 
    } else if (isPlaying) {
        audio.pause();
        playPauseIcon.className = 'fas fa-play';
    } else {
        audio.play();
        playPauseIcon.className = 'fas fa-pause';
    }
    isPlaying = !isPlaying;
});

// Skip Back Button
prevButton.addEventListener('click', () => {
    skipTrack(-1);
});

// Skip Forward Button
nextButton.addEventListener('click', () => {
    skipTrack(1);
});

// Track Ended (Auto-skip to next)
audio.addEventListener('ended', () => {
    if (currentTrackIndex < SIMULATED_PLAYLIST_DATA.length - 1) {
        skipTrack(1);
    } else {
        // End of playlist
        isPlaying = false;
        playPauseIcon.className = 'fas fa-play';
        currentTrackIndex = -1; // Reset
    }
});

// Time and Progress Bar Updates
audio.addEventListener('loadedmetadata', () => {
    durationDisplay.textContent = formatTime(audio.duration);
});

audio.addEventListener('timeupdate', () => {
    const currentTime = audio.currentTime;
    const duration = audio.duration;

    if (!isNaN(duration)) {
        currentTimeDisplay.textContent = formatTime(currentTime);
        const progressPercent = (currentTime / duration) * 100;
        progressBar.style.width = `${progressPercent}%`;
    }
});

// Seek functionality (Clicking on the progress bar)
progressBarContainer.addEventListener('click', (e) => {
    if (!isNaN(audio.duration) && audio.src) {
        const clickX = e.offsetX;
        const totalWidth = progressBarContainer.clientWidth;
        const seekTime = (clickX / totalWidth) * audio.duration;
        audio.currentTime = seekTime;
    }
});

// --- SIMULATED MEGA LOAD BUTTON ---
loadButton.addEventListener('click', () => {
    const link = megaLinkInput.value.trim();
    if (link) {
        alert("Simulating MEGA link load: Folder structure decoded! The pre-loaded playlist is now active.");
        // In a real app, you would replace SIMULATED_PLAYLIST_DATA with the decoded files
        renderPlaylist();
    } else {
        alert("Enter a link to simulate the load, or click a track on the left to start!");
    }
});
